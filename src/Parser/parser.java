
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Parser;

import AST.*;
import java.util.*;
import java_cup.runtime.*;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\060\000\002\013\004\000\002\002\004\000\002\007" +
    "\023\000\002\010\010\000\002\010\012\000\002\011\005" +
    "\000\002\012\017\000\002\006\005\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\002\005\000\002" +
    "\002\011\000\002\002\007\000\002\002\007\000\002\002" +
    "\006\000\002\002\011\000\002\004\002\000\002\004\004" +
    "\000\002\014\002\000\002\014\004\000\002\016\002\000" +
    "\002\016\004\000\002\015\002\000\002\015\004\000\002" +
    "\017\002\000\002\017\004\000\002\021\002\000\002\021" +
    "\004\000\002\020\004\000\002\003\005\000\002\003\005" +
    "\000\002\003\005\000\002\003\005\000\002\003\005\000" +
    "\002\003\006\000\002\003\005\000\002\003\010\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\007\000\002\003\006" +
    "\000\002\003\004\000\002\003\005\000\002\005\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\211\000\004\024\006\001\002\000\004\002\213\001" +
    "\002\000\006\002\uffee\024\140\001\002\000\004\050\007" +
    "\001\002\000\026\012\uffd2\013\uffd2\025\uffd2\030\uffd2\040" +
    "\uffd2\041\uffd2\042\uffd2\043\uffd2\045\uffd2\050\uffd2\001\002" +
    "\000\004\045\011\001\002\000\004\020\012\001\002\000" +
    "\004\021\013\001\002\000\004\022\014\001\002\000\004" +
    "\023\015\001\002\000\004\040\016\001\002\000\004\011" +
    "\017\001\002\000\004\043\020\001\002\000\004\044\021" +
    "\001\002\000\004\050\007\001\002\000\004\041\023\001" +
    "\002\000\004\045\024\001\002\000\014\005\030\007\027" +
    "\010\031\045\025\050\007\001\002\000\016\005\030\007" +
    "\027\010\031\045\025\046\uffe8\050\007\001\002\000\004" +
    "\046\131\001\002\000\004\040\125\001\002\000\004\040" +
    "\117\001\002\000\004\040\113\001\002\000\006\030\033" +
    "\043\034\001\002\000\022\014\036\015\041\016\042\017" +
    "\035\037\044\040\045\050\043\051\037\001\002\000\022" +
    "\014\036\015\041\016\042\017\035\037\044\040\045\050" +
    "\043\051\037\001\002\000\006\012\103\050\007\001\002" +
    "\000\046\014\uffda\015\uffda\016\uffda\017\uffda\027\uffda\031" +
    "\uffda\032\uffda\033\uffda\034\uffda\036\uffda\037\uffda\040\uffda" +
    "\041\uffda\042\uffda\043\uffda\044\uffda\050\uffda\051\uffda\001" +
    "\002\000\046\014\uffdb\015\uffdb\016\uffdb\017\uffdb\027\uffdb" +
    "\031\uffdb\032\uffdb\033\uffdb\034\uffdb\036\uffdb\037\uffdb\040" +
    "\uffdb\041\uffdb\042\uffdb\043\uffdb\044\uffdb\050\uffdb\051\uffdb" +
    "\001\002\000\022\027\052\031\051\032\047\033\053\034" +
    "\055\036\056\043\054\044\076\001\002\000\046\014\uffd9" +
    "\015\uffd9\016\uffd9\017\uffd9\027\uffd9\031\uffd9\032\uffd9\033" +
    "\uffd9\034\uffd9\036\uffd9\037\uffd9\040\uffd9\041\uffd9\042\uffd9" +
    "\043\uffd9\044\uffd9\050\uffd9\051\uffd9\001\002\000\046\014" +
    "\uffd7\015\uffd7\016\uffd7\017\uffd7\027\uffd7\031\uffd7\032\uffd7" +
    "\033\uffd7\034\uffd7\036\uffd7\037\uffd7\040\uffd7\041\uffd7\042" +
    "\uffd7\043\uffd7\044\uffd7\050\uffd7\051\uffd7\001\002\000\046" +
    "\014\uffd8\015\uffd8\016\uffd8\017\uffd8\027\uffd8\031\uffd8\032" +
    "\uffd8\033\uffd8\034\uffd8\036\uffd8\037\uffd8\040\uffd8\041\uffd8" +
    "\042\uffd8\043\uffd8\044\uffd8\050\uffd8\051\uffd8\001\002\000" +
    "\022\014\036\015\041\016\042\017\035\037\044\040\045" +
    "\050\043\051\037\001\002\000\022\014\036\015\041\016" +
    "\042\017\035\037\044\040\045\050\043\051\037\001\002" +
    "\000\022\027\052\031\051\032\047\033\053\034\055\036" +
    "\056\041\050\043\054\001\002\000\022\014\036\015\041" +
    "\016\042\017\035\037\044\040\045\050\043\051\037\001" +
    "\002\000\046\014\uffd3\015\uffd3\016\uffd3\017\uffd3\027\uffd3" +
    "\031\uffd3\032\uffd3\033\uffd3\034\uffd3\036\uffd3\037\uffd3\040" +
    "\uffd3\041\uffd3\042\uffd3\043\uffd3\044\uffd3\050\uffd3\051\uffd3" +
    "\001\002\000\022\014\036\015\041\016\042\017\035\037" +
    "\044\040\045\050\043\051\037\001\002\000\022\014\036" +
    "\015\041\016\042\017\035\037\044\040\045\050\043\051" +
    "\037\001\002\000\022\014\036\015\041\016\042\017\035" +
    "\037\044\040\045\050\043\051\037\001\002\000\022\014" +
    "\036\015\041\016\042\017\035\037\044\040\045\050\043" +
    "\051\037\001\002\000\022\014\036\015\041\016\042\017" +
    "\035\037\044\040\045\050\043\051\037\001\002\000\006" +
    "\026\057\050\007\001\002\000\046\014\uffdd\015\uffdd\016" +
    "\uffdd\017\uffdd\027\uffdd\031\uffdd\032\uffdd\033\uffdd\034\uffdd" +
    "\036\uffdd\037\uffdd\040\uffdd\041\uffdd\042\uffdd\043\uffdd\044" +
    "\uffdd\050\uffdd\051\uffdd\001\002\000\004\040\061\001\002" +
    "\000\024\014\036\015\041\016\042\017\035\037\044\040" +
    "\045\041\ufff0\050\043\051\037\001\002\000\004\041\065" +
    "\001\002\000\042\014\036\015\041\016\042\017\035\027" +
    "\052\031\051\032\047\033\053\034\055\036\056\037\044" +
    "\040\045\041\ufff0\043\054\050\043\051\037\001\002\000" +
    "\004\041\uffef\001\002\000\046\014\uffdc\015\uffdc\016\uffdc" +
    "\017\uffdc\027\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc\036" +
    "\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc\044\uffdc" +
    "\050\uffdc\051\uffdc\001\002\000\046\014\uffdf\015\uffdf\016" +
    "\uffdf\017\uffdf\027\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf" +
    "\036\056\037\uffdf\040\uffdf\041\uffdf\042\uffdf\043\uffdf\044" +
    "\uffdf\050\uffdf\051\uffdf\001\002\000\022\027\052\031\051" +
    "\032\047\033\053\034\055\036\056\043\054\044\070\001" +
    "\002\000\046\014\uffde\015\uffde\016\uffde\017\uffde\027\uffde" +
    "\031\uffde\032\uffde\033\uffde\034\uffde\036\uffde\037\uffde\040" +
    "\uffde\041\uffde\042\uffde\043\uffde\044\uffde\050\uffde\051\uffde" +
    "\001\002\000\046\014\uffe0\015\uffe0\016\uffe0\017\uffe0\027" +
    "\uffe0\031\uffe0\032\uffe0\033\uffe0\034\055\036\056\037\uffe0" +
    "\040\uffe0\041\uffe0\042\uffe0\043\uffe0\044\uffe0\050\uffe0\051" +
    "\uffe0\001\002\000\046\014\uffe1\015\uffe1\016\uffe1\017\uffe1" +
    "\027\uffe1\031\uffe1\032\uffe1\033\uffe1\034\055\036\056\037" +
    "\uffe1\040\uffe1\041\uffe1\042\uffe1\043\uffe1\044\uffe1\050\uffe1" +
    "\051\uffe1\001\002\000\044\014\uffe3\015\uffe3\016\uffe3\017" +
    "\uffe3\027\052\032\047\033\053\034\055\036\056\037\uffe3" +
    "\040\uffe3\041\uffe3\042\uffe3\043\uffe3\044\uffe3\050\uffe3\051" +
    "\uffe3\001\002\000\044\014\uffe2\015\uffe2\016\uffe2\017\uffe2" +
    "\027\052\031\uffe2\033\053\034\055\036\056\037\uffe2\040" +
    "\uffe2\041\uffe2\042\uffe2\043\uffe2\044\uffe2\050\uffe2\051\uffe2" +
    "\001\002\000\046\014\uffd4\015\uffd4\016\uffd4\017\uffd4\027" +
    "\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4\036\056\037\uffd4" +
    "\040\uffd4\041\uffd4\042\uffd4\043\uffd4\044\uffd4\050\uffd4\051" +
    "\uffd4\001\002\000\004\030\077\001\002\000\022\014\036" +
    "\015\041\016\042\017\035\037\044\040\045\050\043\051" +
    "\037\001\002\000\022\027\052\031\051\032\047\033\053" +
    "\034\055\036\056\042\101\043\054\001\002\000\022\004" +
    "\ufff1\005\ufff1\006\ufff1\007\ufff1\010\ufff1\045\ufff1\046\ufff1" +
    "\050\ufff1\001\002\000\004\040\107\001\002\000\004\043" +
    "\104\001\002\000\022\014\036\015\041\016\042\017\035" +
    "\037\044\040\045\050\043\051\037\001\002\000\022\027" +
    "\052\031\051\032\047\033\053\034\055\036\056\043\054" +
    "\044\106\001\002\000\046\014\uffd6\015\uffd6\016\uffd6\017" +
    "\uffd6\027\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6\036\uffd6" +
    "\037\uffd6\040\uffd6\041\uffd6\042\uffd6\043\uffd6\044\uffd6\050" +
    "\uffd6\051\uffd6\001\002\000\004\041\110\001\002\000\046" +
    "\014\uffd5\015\uffd5\016\uffd5\017\uffd5\027\uffd5\031\uffd5\032" +
    "\uffd5\033\uffd5\034\uffd5\036\uffd5\037\uffd5\040\uffd5\041\uffd5" +
    "\042\uffd5\043\uffd5\044\uffd5\050\uffd5\051\uffd5\001\002\000" +
    "\022\027\052\031\051\032\047\033\053\034\055\036\056" +
    "\042\112\043\054\001\002\000\022\004\ufff2\005\ufff2\006" +
    "\ufff2\007\ufff2\010\ufff2\045\ufff2\046\ufff2\050\ufff2\001\002" +
    "\000\022\014\036\015\041\016\042\017\035\037\044\040" +
    "\045\050\043\051\037\001\002\000\022\027\052\031\051" +
    "\032\047\033\053\034\055\036\056\041\115\043\054\001" +
    "\002\000\004\042\116\001\002\000\022\004\ufff3\005\ufff3" +
    "\006\ufff3\007\ufff3\010\ufff3\045\ufff3\046\ufff3\050\ufff3\001" +
    "\002\000\022\014\036\015\041\016\042\017\035\037\044" +
    "\040\045\050\043\051\037\001\002\000\022\027\052\031" +
    "\051\032\047\033\053\034\055\036\056\041\121\043\054" +
    "\001\002\000\014\005\030\007\027\010\031\045\025\050" +
    "\007\001\002\000\004\006\123\001\002\000\014\005\030" +
    "\007\027\010\031\045\025\050\007\001\002\000\022\004" +
    "\ufff5\005\ufff5\006\ufff5\007\ufff5\010\ufff5\045\ufff5\046\ufff5" +
    "\050\ufff5\001\002\000\022\014\036\015\041\016\042\017" +
    "\035\037\044\040\045\050\043\051\037\001\002\000\022" +
    "\027\052\031\051\032\047\033\053\034\055\036\056\041" +
    "\127\043\054\001\002\000\014\005\030\007\027\010\031" +
    "\045\025\050\007\001\002\000\022\004\ufff4\005\ufff4\006" +
    "\ufff4\007\ufff4\010\ufff4\045\ufff4\046\ufff4\050\ufff4\001\002" +
    "\000\004\046\132\001\002\000\006\002\uffff\024\uffff\001" +
    "\002\000\020\004\uffe8\005\030\007\027\010\031\045\025" +
    "\046\uffe8\050\007\001\002\000\004\046\135\001\002\000" +
    "\022\004\ufff6\005\ufff6\006\ufff6\007\ufff6\010\ufff6\045\ufff6" +
    "\046\ufff6\050\ufff6\001\002\000\006\004\uffe7\046\uffe7\001" +
    "\002\000\006\002\uffee\024\140\001\002\000\004\050\007" +
    "\001\002\000\004\002\001\001\002\000\006\025\144\045" +
    "\143\001\002\000\014\012\uffea\013\uffea\020\uffea\046\uffea" +
    "\050\uffea\001\002\000\004\050\007\001\002\000\004\045" +
    "\146\001\002\000\014\012\uffea\013\uffea\020\uffea\046\uffea" +
    "\050\uffea\001\002\000\014\012\151\013\152\020\153\046" +
    "\uffec\050\007\001\002\000\004\050\007\001\002\000\006" +
    "\043\203\050\ufff8\001\002\000\004\050\ufff9\001\002\000" +
    "\010\012\151\013\152\050\007\001\002\000\026\004\uffe9" +
    "\005\uffe9\007\uffe9\010\uffe9\012\uffe9\013\uffe9\020\uffe9\045" +
    "\uffe9\046\uffe9\050\uffe9\001\002\000\004\050\ufff7\001\002" +
    "\000\004\046\161\001\002\000\006\020\153\046\uffec\001" +
    "\002\000\004\046\uffeb\001\002\000\006\002\ufffd\024\ufffd" +
    "\001\002\000\004\050\007\001\002\000\004\040\164\001" +
    "\002\000\012\012\151\013\152\041\uffe6\050\007\001\002" +
    "\000\004\041\172\001\002\000\004\050\007\001\002\000" +
    "\012\012\151\013\152\041\uffe6\050\007\001\002\000\004" +
    "\041\uffe5\001\002\000\012\012\uffe4\013\uffe4\041\uffe4\050" +
    "\uffe4\001\002\000\004\045\173\001\002\000\022\004\uffea" +
    "\005\uffea\007\uffea\010\uffea\012\uffea\013\uffea\045\uffea\050" +
    "\uffea\001\002\000\022\004\uffe8\005\030\007\027\010\031" +
    "\012\151\013\152\045\025\050\007\001\002\000\004\004" +
    "\177\001\002\000\010\030\033\043\034\050\ufff7\001\002" +
    "\000\022\014\036\015\041\016\042\017\035\037\044\040" +
    "\045\050\043\051\037\001\002\000\022\027\052\031\051" +
    "\032\047\033\053\034\055\036\056\042\201\043\054\001" +
    "\002\000\004\046\202\001\002\000\006\020\ufffb\046\ufffb" +
    "\001\002\000\004\044\204\001\002\000\004\050\ufffa\001" +
    "\002\000\004\042\206\001\002\000\026\004\ufffc\005\ufffc" +
    "\007\ufffc\010\ufffc\012\ufffc\013\ufffc\020\ufffc\045\ufffc\046" +
    "\ufffc\050\ufffc\001\002\000\014\012\151\013\152\020\153" +
    "\046\uffec\050\007\001\002\000\004\046\211\001\002\000" +
    "\006\002\ufffe\024\ufffe\001\002\000\004\002\uffed\001\002" +
    "\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\211\000\006\007\004\013\003\001\001\000\002\001" +
    "\001\000\006\010\136\014\140\001\001\000\004\005\007" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\002\025\005\031\001\001\000" +
    "\010\002\132\005\031\017\133\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\110\001\001\000\004\003\037" +
    "\001\001\000\004\005\101\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\003\074\001\001\000" +
    "\004\003\045\001\001\000\002\001\001\000\004\003\073" +
    "\001\001\000\002\001\001\000\004\003\072\001\001\000" +
    "\004\003\071\001\001\000\004\003\070\001\001\000\004" +
    "\003\066\001\001\000\004\003\065\001\001\000\004\005" +
    "\057\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\003\062\004\061\001\001\000\002\001\001\000\006\003" +
    "\062\004\063\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\003" +
    "\077\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\003\104\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\003" +
    "\113\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\003\117\001\001\000\002\001\001\000" +
    "\006\002\121\005\031\001\001\000\002\001\001\000\006" +
    "\002\123\005\031\001\001\000\002\001\001\000\004\003" +
    "\125\001\001\000\002\001\001\000\006\002\127\005\031" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\002\132\005\031\017\135\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\010" +
    "\136\014\211\001\001\000\004\005\141\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\206\001\001\000" +
    "\004\005\144\001\001\000\002\001\001\000\004\015\146" +
    "\001\001\000\014\005\154\006\147\011\153\012\156\016" +
    "\155\001\001\000\004\005\204\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\154\006\161\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\012\156\016\157\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\162\001\001\000\002\001\001\000\012" +
    "\005\154\006\165\020\166\021\164\001\001\000\002\001" +
    "\001\000\004\005\170\001\001\000\012\005\154\006\165" +
    "\020\166\021\167\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\173\001\001\000\014" +
    "\002\132\005\175\006\147\011\153\017\174\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\177\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\005\154\006\147\011\153\012\156\016" +
    "\207\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Goal ::= MainClass ClassDeclarationList 
            {
              Program RESULT =null;
		Location mxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location mxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		MainClass m = (MainClass)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Location cdlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location cdlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		ClassDeclList cdl = (ClassDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Program(m, cdl, mxleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Goal",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Goal EOF 
            {
              Object RESULT =null;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // MainClass ::= CLASS Identifier LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET Identifier RPAREN LBRACE Statement RBRACE RBRACE 
            {
              MainClass RESULT =null;
		Location id1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).xleft;
		Location id1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).xright;
		Identifier id1 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-15)).value;
		Location id2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).xleft;
		Location id2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).xright;
		Identifier id2 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		Location statementxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location statementxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new MainClass(id1, id2, statement, id1xleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MainClass",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-16)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ClassDeclaration ::= CLASS Identifier LBRACE VarDeclarationList MethodDeclarationList RBRACE 
            {
              ClassDecl RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).xright;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		Location vdlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location vdlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		VarDeclList vdl = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location mdlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location mdlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		MethodDeclList mdl = (MethodDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ClassDeclSimple(id, vdl, mdl, idxleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassDeclaration",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ClassDeclaration ::= CLASS Identifier EXTENDS Identifier LBRACE VarDeclarationList MethodDeclarationList RBRACE 
            {
              ClassDecl RESULT =null;
		Location id1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).xleft;
		Location id1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).xright;
		Identifier id1 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		Location id2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).xleft;
		Location id2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).xright;
		Identifier id2 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		Location vdlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location vdlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		VarDeclList vdl = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location mdlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location mdlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		MethodDeclList mdl = (MethodDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ClassDeclExtends(id1, id2, vdl, mdl, id1xleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassDeclaration",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // VarDeclaration ::= Type Identifier SEMICOLON 
            {
              VarDecl RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDecl(t, id, txleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDeclaration",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // MethodDeclaration ::= PUBLIC Type Identifier LPAREN FormalList RPAREN LBRACE VarDeclarationList StatementList RETURN Expression SEMICOLON RBRACE 
            {
              MethodDecl RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).xright;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).xright;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		Location flxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).xleft;
		Location flxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).xright;
		FormalList fl = (FormalList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		Location vdlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).xleft;
		Location vdlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).xright;
		VarDeclList vdl = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		Location slxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).xleft;
		Location slxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).xright;
		StatementList sl = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		Location exprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location exprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		Exp expr = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new MethodDecl(t, id, fl, vdl, sl, expr, txleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MethodDeclaration",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Type ::= INT LBRACKET RBRACKET 
            {
              Type RESULT =null;
		Location integerxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location integerxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		Object integer = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new IntArrayType(integerxleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Type ::= BOOL 
            {
              Type RESULT =null;
		Location booleantypexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location booleantypexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Object booleantype = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BooleanType(booleantypexleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Type ::= INT 
            {
              Type RESULT =null;
		Location integerxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location integerxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Object integer = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IntegerType(integerxleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Type ::= Identifier 
            {
              Type RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IdentifierType(id.toString(), idxleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Statement ::= LBRACE StatementList RBRACE 
            {
              Statement RESULT =null;
		Location slxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location slxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		StatementList sl = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Block(sl,slxleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Statement ::= IF LPAREN Expression RPAREN Statement ELSE Statement 
            {
              Statement RESULT =null;
		Location exprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).xleft;
		Location exprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).xright;
		Exp expr = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		Location statement1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location statement1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		Statement statement1 = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location statement2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location statement2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Statement statement2 = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new If(expr, statement1, statement2, exprxleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Statement ::= WHILE LPAREN Expression RPAREN Statement 
            {
              Statement RESULT =null;
		Location exprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location exprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		Exp expr = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location statementxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location statementxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new While(expr, statement, exprxleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Statement ::= STDOUT LPAREN Expression RPAREN SEMICOLON 
            {
              Statement RESULT =null;
		Location exprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location exprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		Exp expr = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Print(expr, exprxleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Statement ::= Identifier BECOMES Expression SEMICOLON 
            {
              Statement RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).xright;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Location exprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location exprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Exp expr = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Assign(id, expr, idxleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Statement ::= Identifier LBRACKET Expression RBRACKET BECOMES Expression SEMICOLON 
            {
              Statement RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).xright;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		Location expr1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).xleft;
		Location expr1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).xright;
		Exp expr1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		Location expr2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location expr2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Exp expr2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ArrayAssign(id, expr1, expr2, idxleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ExpressionList ::= 
            {
              ExpList RESULT =null;
		 RESULT = new ExpList(new Location(0,0)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpressionList",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ExpressionList ::= Expression ExpressionList 
            {
              ExpList RESULT =null;
		Location exprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location exprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Exp expr = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Location elxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location elxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		ExpList el = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 el.add(expr);
       RESULT = el; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpressionList",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ClassDeclarationList ::= 
            {
              ClassDeclList RESULT =null;
		 RESULT = new ClassDeclList(new Location(0,0)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassDeclarationList",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ClassDeclarationList ::= ClassDeclaration ClassDeclarationList 
            {
              ClassDeclList RESULT =null;
		Location cdxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location cdxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		ClassDecl cd = (ClassDecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Location cdlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location cdlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		ClassDeclList cdl = (ClassDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 cdl.add(cd);
       RESULT = cdl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassDeclarationList",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // MethodDeclarationList ::= 
            {
              MethodDeclList RESULT =null;
		 RESULT = new MethodDeclList(new Location(0,0)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MethodDeclarationList",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // MethodDeclarationList ::= MethodDeclaration MethodDeclarationList 
            {
              MethodDeclList RESULT =null;
		Location mdxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location mdxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		MethodDecl md = (MethodDecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Location mdlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location mdlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		MethodDeclList mdl = (MethodDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 mdl.add(md);
       RESULT = mdl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MethodDeclarationList",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // VarDeclarationList ::= 
            {
              VarDeclList RESULT =null;
		 RESULT = new VarDeclList(new Location(0,0)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDeclarationList",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // VarDeclarationList ::= VarDeclarationList VarDeclaration 
            {
              VarDeclList RESULT =null;
		Location vdlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location vdlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		VarDeclList vdl = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Location vdxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location vdxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		VarDecl vd = (VarDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 vdl.add(vd);
       RESULT = vdl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDeclarationList",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // StatementList ::= 
            {
              StatementList RESULT =null;
		 RESULT = new StatementList(new Location(0,0)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StatementList",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // StatementList ::= Statement StatementList 
            {
              StatementList RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Location slxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location slxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		StatementList sl = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 sl.add(s);
       RESULT = sl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StatementList",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // FormalList ::= 
            {
              FormalList RESULT =null;
		 RESULT = new FormalList(new Location(0,0)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FormalList",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // FormalList ::= Formal FormalList 
            {
              FormalList RESULT =null;
		Location fxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location fxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Formal f = (Formal)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Location flxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location flxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		FormalList fl = (FormalList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 fl.add(f);
       RESULT = fl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FormalList",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Formal ::= Type Identifier 
            {
              Formal RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Formal(t, id, txleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Formal",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Expression ::= Expression AND Expression 
            {
              Exp RESULT =null;
		Location arg1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location arg1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		Exp arg1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location arg2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location arg2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Exp arg2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new And(arg1, arg2, arg1xleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Expression ::= Expression LTHAN Expression 
            {
              Exp RESULT =null;
		Location arg1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location arg1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		Exp arg1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location arg2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location arg2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Exp arg2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LessThan(arg1, arg2, arg1xleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Expression ::= Expression PLUS Expression 
            {
              Exp RESULT =null;
		Location arg1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location arg1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		Exp arg1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location arg2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location arg2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Exp arg2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Plus(arg1, arg2, arg1xleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Expression ::= Expression MINUS Expression 
            {
              Exp RESULT =null;
		Location arg1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location arg1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		Exp arg1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location arg2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location arg2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Exp arg2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Minus(arg1, arg2, arg1xleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Expression ::= Expression TIMES Expression 
            {
              Exp RESULT =null;
		Location arg1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location arg1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		Exp arg1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location arg2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location arg2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Exp arg2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Times(arg1, arg2, arg1xleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Expression ::= Expression LBRACKET Expression RBRACKET 
            {
              Exp RESULT =null;
		Location arg1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).xleft;
		Location arg1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).xright;
		Exp arg1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Location arg2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location arg2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Exp arg2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ArrayLookup(arg1, arg2, arg1xleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Expression ::= Expression DOT LENGTH 
            {
              Exp RESULT =null;
		Location arg1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location arg1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		Exp arg1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ArrayLength(arg1, arg1xleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Expression ::= Expression DOT Identifier LPAREN ExpressionList RPAREN 
            {
              Exp RESULT =null;
		Location expr1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).xleft;
		Location expr1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).xright;
		Exp expr1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).xright;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Location elxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location elxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		ExpList el = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Call(expr1, id, el, expr1xleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Expression ::= DIGIT 
            {
              Exp RESULT =null;
		Location argxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location argxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Integer arg = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IntegerLiteral(arg, argxleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Expression ::= TRUE 
            {
              Exp RESULT =null;
		Location argxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location argxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Object arg = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new True(argxleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Expression ::= FALSE 
            {
              Exp RESULT =null;
		Location argxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location argxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Object arg = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new False(argxleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Expression ::= IDENTIFIER 
            {
              Exp RESULT =null;
		Location namexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location namexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IdentifierExp(name, namexleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Expression ::= THIS 
            {
              Exp RESULT =null;
		Location argxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location argxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Object arg = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new This(argxleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Expression ::= NEW INT LBRACKET Expression RBRACKET 
            {
              Exp RESULT =null;
		Location exprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location exprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Exp expr = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new NewArray(expr, exprxleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Expression ::= NEW Identifier LPAREN RPAREN 
            {
              Exp RESULT =null;
		Location argxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location argxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		Identifier arg = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new NewObject(arg, argxleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Expression ::= NOT Expression 
            {
              Exp RESULT =null;
		Location exprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location exprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Exp expr = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Not(expr, exprxleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Expression ::= LPAREN Expression RPAREN 
            {
              Exp RESULT =null;
		Location exprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location exprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Exp expr = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = expr; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Identifier ::= IDENTIFIER 
            {
              Identifier RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Identifier(id, idxleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Identifier",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
